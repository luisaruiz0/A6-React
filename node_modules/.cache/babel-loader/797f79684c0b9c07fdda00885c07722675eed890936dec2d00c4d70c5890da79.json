{"ast":null,"code":"var _jsxFileName = \"/Users/luis/Desktop/cs2250/HW6-react/src/cat.js\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n\n// const CatApp = () => {\n//   const [statusCode, setStatusCode] = React.useState(\"\");\n//   const [items, setItems] = React.useState(null);\n//   const [isDataLoaded, setIsDataLoaded] = React.useState(false);\n\n//   const fetchCatImage = () => {\n//     if (!statusCode || isNaN(statusCode)) {\n//       alert(\"Please enter a valid status code!\");\n//       return;\n//     }\n\n//     setIsDataLoaded(false);\n//     const imageUrl = `https://http.cat/${statusCode}`;\n//     setItems(imageUrl);\n//     setIsDataLoaded(true);\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Status Codes Translation for Cats</h1>\n//       <p>If you are a cat, and dont know what status codes means type in the status code you need to figure it out.</p>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter status code\"\n//         value={statusCode}\n//         onChange={(e) => setStatusCode(e.target.value)}\n//       />\n//       <button onClick={fetchCatImage}>Translation</button>\n\n//       {isDataLoaded && items && (\n//         <div>\n//           <img src={items} alt={`HTTP Cat for status ${statusCode}`} />\n//           <p>Status Code: {statusCode}</p>\n//         </div>\n//       )}\n\n//       {isDataLoaded && !items && (\n//         <div>\n//           <p>No cat image found for status code: {statusCode}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default CatApp;\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CatApp = () => {\n  _s();\n  const [items, setItems] = useState([]);\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\n  useEffect(() => {\n    fetch('https://rickandmortyapi.com/api/character').then(res => res.json()).then(json => {\n      const randomIndex = Math.floor(Math.random() * json.results.length);\n      setItems([json.results[randomIndex]]);\n      setIsDataLoaded(true);\n    }).catch(error => {\n      console.error('Error fetching data: ', error);\n      setIsDataLoaded(true);\n    });\n  }, []);\n  if (!isDataLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" LOADING DATA .... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"RANDOM Rick and Morty Character\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), items.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: item.image,\n        alt: item.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name: \", item.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Status: \", item.status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Species: \", item.species]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, item.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Go to TicTacToe Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(CatApp, \"vRw8nDjCOtl/1Az4l6Yxmv4g2hM=\");\n_c = CatApp;\nexport default CatApp;\nvar _c;\n$RefreshReg$(_c, \"CatApp\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CatApp","_s","items","setItems","isDataLoaded","setIsDataLoaded","fetch","then","res","json","randomIndex","Math","floor","random","results","length","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","item","src","image","alt","name","status","species","id","Link","to","_c","$RefreshReg$"],"sources":["/Users/luis/Desktop/cs2250/HW6-react/src/cat.js"],"sourcesContent":["// import React from \"react\";\n\n// const CatApp = () => {\n//   const [statusCode, setStatusCode] = React.useState(\"\");\n//   const [items, setItems] = React.useState(null);\n//   const [isDataLoaded, setIsDataLoaded] = React.useState(false);\n\n//   const fetchCatImage = () => {\n//     if (!statusCode || isNaN(statusCode)) {\n//       alert(\"Please enter a valid status code!\");\n//       return;\n//     }\n\n//     setIsDataLoaded(false);\n//     const imageUrl = `https://http.cat/${statusCode}`;\n//     setItems(imageUrl);\n//     setIsDataLoaded(true);\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Status Codes Translation for Cats</h1>\n//       <p>If you are a cat, and dont know what status codes means type in the status code you need to figure it out.</p>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter status code\"\n//         value={statusCode}\n//         onChange={(e) => setStatusCode(e.target.value)}\n//       />\n//       <button onClick={fetchCatImage}>Translation</button>\n\n//       {isDataLoaded && items && (\n//         <div>\n//           <img src={items} alt={`HTTP Cat for status ${statusCode}`} />\n//           <p>Status Code: {statusCode}</p>\n//         </div>\n//       )}\n\n//       {isDataLoaded && !items && (\n//         <div>\n//           <p>No cat image found for status code: {statusCode}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default CatApp;\nimport React, { useState, useEffect } from 'react';\n\nconst CatApp = () => {\n  const [items, setItems] = useState([]);\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\n\n  useEffect(() => {\n    fetch('https://rickandmortyapi.com/api/character')\n      .then((res) => res.json())\n      .then((json) => {\n        const randomIndex = Math.floor(Math.random() * json.results.length);\n        setItems([json.results[randomIndex]]);\n        setIsDataLoaded(true);\n      })\n      .catch((error) => {\n        console.error('Error fetching data: ', error);\n        setIsDataLoaded(true);\n      });\n  }, []);\n\n  if (!isDataLoaded) {\n    return (\n      <div>\n        <h1> LOADING DATA .... </h1>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>RANDOM Rick and Morty Character</h1>\n      {items.map((item) => (\n        <div key={item.id}>\n          <img src={item.image} alt={item.name} />\n          <p>Name: {item.name}</p>\n          <p>Status: {item.status}</p>\n          <p>Species: {item.species}</p>\n        </div>\n      ))}\n      <Link to=\"/\">\n        <button>Go to TicTacToe Page</button>\n     </Link>\n    </div>\n    \n  );\n};\n\nexport default CatApp;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}