{"ast":null,"code":"var _jsxFileName = \"/Users/luis/Desktop/cs2250/HW6-react/src/cat.js\",\n  _s = $RefreshSig$();\n// \nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CatApp() {\n  _s();\n  const fixedStatusCodes = [100, 101, 102, 103, 200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300, 301, 302, 303, 304, 307, 308, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 426, 428, 429, 431, 451, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511];\n  const [imageUrls, setImageUrls] = useState({});\n  useEffect(() => {\n    const fetchImages = async () => {\n      const urls = {};\n      for (const code of fixedStatusCodes) {\n        try {\n          const response = await fetch(`/${code}`);\n          if (!response.ok) {\n            throw new Error('Network response failure');\n          }\n          const blob = await response.blob();\n          const imageUrl = URL.createObjectURL(blob);\n          urls[code] = imageUrl;\n        } catch (error) {\n          console.error(`Error fetching image for status code ${code}:`, error);\n          urls[code] = null; // Store null for failed requests\n        }\n      }\n\n      setImageUrls(urls);\n    };\n    fetchImages();\n  }, [fixedStatusCodes]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Status Code Images\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status-code-images\",\n      children: fixedStatusCodes.map(code => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Status Code: \", code]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this), imageUrls[code] ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: imageUrls[code],\n          alt: `Cat status code depiction for ${code}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Error loading image for status code \", code]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this)]\n      }, code, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(CatApp, \"DDYIY73mbFi6ivYaPAFH+8n7Xl0=\");\n_c = CatApp;\nexport default CatApp;\nvar _c;\n$RefreshReg$(_c, \"CatApp\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CatApp","_s","fixedStatusCodes","imageUrls","setImageUrls","fetchImages","urls","code","response","fetch","ok","Error","blob","imageUrl","URL","createObjectURL","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","src","alt","_c","$RefreshReg$"],"sources":["/Users/luis/Desktop/cs2250/HW6-react/src/cat.js"],"sourcesContent":["// \nimport React, { useState, useEffect } from 'react';\n\nfunction CatApp() {\n  const fixedStatusCodes = [\n    100, 101, 102, 103, 200, 201, 202, 203, 204, 205, 206, 207, 208, 226, 300,\n    301, 302, 303, 304, 307, 308, 400, 401, 402, 403, 404, 405, 406, 407, 408,\n    409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425,\n    426, 428, 429, 431, 451, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511\n  ];\n\n  const [imageUrls, setImageUrls] = useState({});\n\n  useEffect(() => {\n    const fetchImages = async () => {\n      const urls = {};\n\n      for (const code of fixedStatusCodes) {\n        try {\n          const response = await fetch(`/${code}`);\n          if (!response.ok) {\n            throw new Error('Network response failure');\n          }\n          const blob = await response.blob();\n          const imageUrl = URL.createObjectURL(blob);\n          urls[code] = imageUrl;\n        } catch (error) {\n          console.error(`Error fetching image for status code ${code}:`, error);\n          urls[code] = null; // Store null for failed requests\n        }\n      }\n\n      setImageUrls(urls);\n    };\n\n    fetchImages();\n  }, [fixedStatusCodes]);\n\n  return (\n    <div>\n      <h2>Status Code Images</h2>\n      <div className=\"status-code-images\">\n        {fixedStatusCodes.map(code => (\n          <div key={code}>\n            <p>Status Code: {code}</p>\n            {imageUrls[code] ? (\n              <img src={imageUrls[code]} alt={`Cat status code depiction for ${code}`} />\n            ) : (\n              <p>Error loading image for status code {code}</p>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default CatApp;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}