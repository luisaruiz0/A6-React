{"ast":null,"code":"var _jsxFileName = \"/Users/luis/Desktop/cs2250/HW6-react/src/cat.js\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n\n// const CatApp = () => {\n//   const [statusCode, setStatusCode] = React.useState(\"\");\n//   const [items, setItems] = React.useState(null);\n//   const [isDataLoaded, setIsDataLoaded] = React.useState(false);\n\n//   const fetchCatImage = () => {\n//     if (!statusCode || isNaN(statusCode)) {\n//       alert(\"Please enter a valid status code!\");\n//       return;\n//     }\n\n//     setIsDataLoaded(false);\n//     const imageUrl = `https://http.cat/${statusCode}`;\n//     setItems(imageUrl);\n//     setIsDataLoaded(true);\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Status Codes Translation for Cats</h1>\n//       <p>If you are a cat, and dont know what status codes means type in the status code you need to figure it out.</p>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter status code\"\n//         value={statusCode}\n//         onChange={(e) => setStatusCode(e.target.value)}\n//       />\n//       <button onClick={fetchCatImage}>Translation</button>\n\n//       {isDataLoaded && items && (\n//         <div>\n//           <img src={items} alt={`HTTP Cat for status ${statusCode}`} />\n//           <p>Status Code: {statusCode}</p>\n//         </div>\n//       )}\n\n//       {isDataLoaded && !items && (\n//         <div>\n//           <p>No cat image found for status code: {statusCode}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default CatApp;\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CatApp = () => {\n  _s();\n  var _character$origin, _character$location;\n  const [character, setCharacter] = useState(null);\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\n  useEffect(() => {\n    fetch(\"https://rickandmortyapi.com/api/character/108\").then(res => {\n      if (!res.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      return res.json();\n    }).then(json => {\n      setCharacter(json);\n      setIsDataLoaded(true);\n    }).catch(error => {\n      console.error(\"Error fetching data: \", error);\n      setIsDataLoaded(true); // Set data loaded to true even on error\n    });\n  }, []);\n  if (!isDataLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Please wait, data is still loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Rick and Morty Character Details\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), character && /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Name: \", character.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Status: \", character.status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Species: \", character.species]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Type: \", character.type]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Gender: \", character.gender]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Origin: \", (_character$origin = character.origin) === null || _character$origin === void 0 ? void 0 : _character$origin.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Location: \", (_character$location = character.location) === null || _character$location === void 0 ? void 0 : _character$location.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Image:\", /*#__PURE__*/_jsxDEV(\"img\", {\n          src: character.image,\n          alt: character.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(CatApp, \"UDickFhJ9h1+NaheporD1mzcYsI=\");\n_c = CatApp;\nexport default CatApp;\nvar _c;\n$RefreshReg$(_c, \"CatApp\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","CatApp","_s","_character$origin","_character$location","character","setCharacter","isDataLoaded","setIsDataLoaded","fetch","then","res","ok","Error","json","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","name","status","species","type","gender","origin","location","src","image","alt","_c","$RefreshReg$"],"sources":["/Users/luis/Desktop/cs2250/HW6-react/src/cat.js"],"sourcesContent":["// import React from \"react\";\n\n// const CatApp = () => {\n//   const [statusCode, setStatusCode] = React.useState(\"\");\n//   const [items, setItems] = React.useState(null);\n//   const [isDataLoaded, setIsDataLoaded] = React.useState(false);\n\n//   const fetchCatImage = () => {\n//     if (!statusCode || isNaN(statusCode)) {\n//       alert(\"Please enter a valid status code!\");\n//       return;\n//     }\n\n//     setIsDataLoaded(false);\n//     const imageUrl = `https://http.cat/${statusCode}`;\n//     setItems(imageUrl);\n//     setIsDataLoaded(true);\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Status Codes Translation for Cats</h1>\n//       <p>If you are a cat, and dont know what status codes means type in the status code you need to figure it out.</p>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter status code\"\n//         value={statusCode}\n//         onChange={(e) => setStatusCode(e.target.value)}\n//       />\n//       <button onClick={fetchCatImage}>Translation</button>\n\n//       {isDataLoaded && items && (\n//         <div>\n//           <img src={items} alt={`HTTP Cat for status ${statusCode}`} />\n//           <p>Status Code: {statusCode}</p>\n//         </div>\n//       )}\n\n//       {isDataLoaded && !items && (\n//         <div>\n//           <p>No cat image found for status code: {statusCode}</p>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default CatApp;\nimport React, { useState, useEffect } from \"react\";\n\nconst CatApp = () => {\n  const [character, setCharacter] = useState(null);\n  const [isDataLoaded, setIsDataLoaded] = useState(false);\n\n  useEffect(() => {\n    fetch(\"https://rickandmortyapi.com/api/character/108\")\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        return res.json();\n      })\n      .then((json) => {\n        setCharacter(json);\n        setIsDataLoaded(true);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching data: \", error);\n        setIsDataLoaded(true); // Set data loaded to true even on error\n      });\n  }, []);\n\n  if (!isDataLoaded) {\n    return (\n      <div>\n        <h1>Please wait, data is still loading</h1>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Rick and Morty Character Details</h1>\n      {character && (\n        <ul>\n          <li>Name: {character.name}</li>\n          <li>Status: {character.status}</li>\n          <li>Species: {character.species}</li>\n          <li>Type: {character.type}</li>\n          <li>Gender: {character.gender}</li>\n          <li>Origin: {character.origin?.name}</li>\n          <li>Location: {character.location?.name}</li>\n          <li>\n            Image:\n            <img src={character.image} alt={character.name} />\n          </li>\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default CatApp;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}